library(shiny)

# Define server logic required to draw a histogram
shinyServer(function(input, output) {
  
  # Expression that generates a histogram. The expression is
  # wrapped in a call to renderPlot to indicate that:
  #
  #  1) It is "reactive" and therefore should be automatically
  #     re-executed when inputs change
  #  2) Its output type is a plot
  
  output$distPlot <- renderPlot({
    x    <- iris[, 2]  # Old Faithful Geyser data
    bins <- seq(min(x), max(x), length.out = input$bins + 1)
    
    # draw the histogram with the specified number of bins
    hist(x, breaks = bins, col = 'blue', border = 'white')
  })
  
})

################
library(shiny)

# Define UI for application that plots random distributions 
shinyUI(pageWithSidebar(
  
  # Application title
  headerPanel(strong("Hellooooo")),
  
  # Sidebar with a slider input for number of observations
  sidebarPanel(
    radioButtons("bins",
                 "Number of bins:",
                 min = 1,
                 max = 50,
                 value = 30)
  ),
  
  # Show a plot of the generated distribution
  mainPanel(
    plotOutput("distPlot", height=250)
  )
))

# radioButtons()

#############
head(iris)

#UI.R
#loading shiny library
library(shiny)

shinyUI(fluidPage(
  
  #fluid page for dynamically adapting to screens of different resolutions.
  titlePanel("Iris Dataset"),
  sidebarLayout(
    sidebarPanel(
      #implementing radio buttons
      radioButtons("p", "Select column of iris dataset:",
                   list("Sepal.Length"='a', "Sepal.Width"='b', "Petal.Length"='c', "Petal.Width"='d')),
      
      #slider input for bins of histogram
      sliderInput("bins",
                  "Number of bins:",
                  min = 1,
                  max = 100,
                  value = 30)
      
      # Show a plot of the generated distribution
    ),
    mainPanel(
      plotOutput("distPlot")
    )
  )
))

#SERVER.R
library(shiny)

#writing server function
shinyServer(function(input, output) {
  
  #referring output distPlot in ui.r as output$distPlot
  output$distPlot <- renderPlot({
    
    #referring input p in ui.r as input$p
    if(input$p=='a'){
      i<-1
    }
    
    if(input$p=='b'){
      i<-2
    }
    
    if(input$p=='c'){
      i<-3
    }
    
    if(input$p=='d'){
      i<-4
    }
    
    x    <- iris[, i]
    
    #referring input bins in ui.r as input$bins
    bins <- seq(min(x), max(x), length.out = input$bins + 1)
    
    #producing histogram as output
    hist(x, breaks = bins, col = 'darkgray', border = 'white')
  })
})

#https://www.analyticsvidhya.com/blog/2016/10/creating-interactive-data-visualization-using-shiny-app-in-r-with-examples/


####################### dates slider ################

ui <- shinyUI(fluidPage(
  
  # Application title
  titlePanel("St Thomas' Physiology Data Console"),
  
  # Sidebar with a slider input for the number of bins
  sidebarLayout(
    sidebarPanel(
      sliderInput("DatesMerge",
                  "Dates:",
                  min = as.Date("2016-01-01","%Y-%m-%d"),
                  max = as.Date("2016-12-01","%Y-%m-%d"),
                  value=as.Date("2016-12-01"),
                  timeFormat="%Y-%m-%d")
    ),
    mainPanel(
      plotOutput("distPlotLactul"))
    
  )
))

server <- shinyServer(function(input, output) {
  
  output$distPlotLactul <- renderPlot({
    #Create the data
    DatesMerge<-input$DatesMerge
    
    # draw the histogram with the specified number of bins
    ggplot(TotsLactul[month(x) == month(DatesMerge)],mapping=aes(x=x))+
      geom_histogram(bins=100)+
      labs(title=paste("Num")) +
      xlab("Time") +
      ylab("NumP") +
      theme(axis.text.x=element_text(angle=-90)) +
      theme(legend.position="top")+
      theme(axis.text=element_text(size=6))
    
    
  })
  
  
})
#https://stackoverflow.com/questions/40908808/how-to-sliderinput-for-dates
######################








